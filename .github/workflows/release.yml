name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (semver) to release (e.g. 0.2.1)'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # for cosign keyless
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (minimal)
        run: |
          pip install .[dev]

      - name: Lint & Test
        run: |
          ruff check .
          mypy .
          pytest

      - name: Derive version
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # tag push refs/tags/vX.Y.Z -> extract
            ref="${GITHUB_REF##*/}"
            echo "version=${ref#v}" >> $GITHUB_OUTPUT
          fi

      - name: Log version
        run: echo "Releasing version ${{ steps.vars.outputs.version }}"

      - name: Build Docker image
        run: |
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          docker build \
            --build-arg GIT_SHA=${GITHUB_SHA} \
            --build-arg BUILD_DATE=$BUILD_DATE \
            -t $REGISTRY/${IMAGE_NAME}:${{ steps.vars.outputs.version }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: |
          docker push $REGISTRY/${IMAGE_NAME}:${{ steps.vars.outputs.version }}
          docker tag $REGISTRY/${IMAGE_NAME}:${{ steps.vars.outputs.version }} $REGISTRY/${IMAGE_NAME}:latest
          docker push $REGISTRY/${IMAGE_NAME}:latest

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.3'

      - name: Sign image (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign $REGISTRY/${IMAGE_NAME}:${{ steps.vars.outputs.version }}
          cosign sign $REGISTRY/${IMAGE_NAME}:latest

      - name: Generate SBOM (syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version }}
          format: spdx-json
          output-file: sbom-${{ steps.vars.outputs.version }}.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ steps.vars.outputs.version }}
          path: sbom-${{ steps.vars.outputs.version }}.spdx.json

